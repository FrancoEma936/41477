//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSubset.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CSubsetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, LETRA=7, DIGITO=8, IF=9, 
		ELSE=10, PRINT=11, RETURN=12, LPAREN=13, RPAREN=14, LBRACE=15, RBRACE=16, 
		SEMI=17, QUOTE=18, ZERO=19, ONE=20, WS=21;
	public const int
		RULE_instrucciones = 0, RULE_instruccion = 1, RULE_decision = 2, RULE_sentencia = 3, 
		RULE_salida = 4, RULE_terminar = 5, RULE_condicion = 6, RULE_cadena = 7, 
		RULE_caracteres = 8, RULE_caracter = 9, RULE_simbolo = 10;
	public static readonly string[] ruleNames = {
		"instrucciones", "instruccion", "decision", "sentencia", "salida", "terminar", 
		"condicion", "cadena", "caracteres", "caracter", "simbolo"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'.'", "'!'", "'?'", "':'", "' '", null, null, "'if'", "'else'", 
		"'print'", "'return'", "'('", "')'", "'{'", "'}'", "';'", "'\"'", "'0'", 
		"'1'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "LETRA", "DIGITO", "IF", "ELSE", 
		"PRINT", "RETURN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "QUOTE", 
		"ZERO", "ONE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSubset.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSubsetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSubsetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSubsetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InstruccionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionesContext instrucciones() {
			return GetRuleContext<InstruccionesContext>(0);
		}
		public InstruccionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrucciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterInstrucciones(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitInstrucciones(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionesContext instrucciones() {
		return instrucciones(0);
	}

	private InstruccionesContext instrucciones(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstruccionesContext _localctx = new InstruccionesContext(Context, _parentState);
		InstruccionesContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_instrucciones, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 23;
			instruccion();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 29;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InstruccionesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_instrucciones);
					State = 25;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 26;
					instruccion();
					}
					} 
				}
				State = 31;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecisionContext decision() {
			return GetRuleContext<DecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruccion);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				decision();
				}
				break;
			case PRINT:
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				sentencia();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CSubsetParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSubsetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSubsetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(CSubsetParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(CSubsetParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(CSubsetParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(CSubsetParser.RBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CSubsetParser.ELSE, 0); }
		public DecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterDecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitDecision(this);
		}
	}

	[RuleVersion(0)]
	public DecisionContext decision() {
		DecisionContext _localctx = new DecisionContext(Context, State);
		EnterRule(_localctx, 4, RULE_decision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(IF);
			State = 37;
			Match(LPAREN);
			State = 38;
			condicion();
			State = 39;
			Match(RPAREN);
			State = 40;
			Match(LBRACE);
			State = 41;
			sentencia();
			State = 42;
			Match(RBRACE);
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 43;
				Match(ELSE);
				State = 44;
				Match(LBRACE);
				State = 45;
				sentencia();
				State = 46;
				Match(RBRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SalidaContext salida() {
			return GetRuleContext<SalidaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminarContext terminar() {
			return GetRuleContext<TerminarContext>(0);
		}
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterSentencia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitSentencia(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 6, RULE_sentencia);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				salida();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				terminar();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SalidaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(CSubsetParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSubsetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CadenaContext cadena() {
			return GetRuleContext<CadenaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSubsetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CSubsetParser.SEMI, 0); }
		public SalidaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_salida; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterSalida(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitSalida(this);
		}
	}

	[RuleVersion(0)]
	public SalidaContext salida() {
		SalidaContext _localctx = new SalidaContext(Context, State);
		EnterRule(_localctx, 8, RULE_salida);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(PRINT);
			State = 55;
			Match(LPAREN);
			State = 56;
			cadena();
			State = 57;
			Match(RPAREN);
			State = 58;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CSubsetParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CSubsetParser.SEMI, 0); }
		public TerminarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterTerminar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitTerminar(this);
		}
	}

	[RuleVersion(0)]
	public TerminarContext terminar() {
		TerminarContext _localctx = new TerminarContext(Context, State);
		EnterRule(_localctx, 10, RULE_terminar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(RETURN);
			State = 61;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO() { return GetToken(CSubsetParser.ZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(CSubsetParser.ONE, 0); }
		public CondicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterCondicion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitCondicion(this);
		}
	}

	[RuleVersion(0)]
	public CondicionContext condicion() {
		CondicionContext _localctx = new CondicionContext(Context, State);
		EnterRule(_localctx, 12, RULE_condicion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO || _la==ONE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CadenaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(CSubsetParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(CSubsetParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaracteresContext caracteres() {
			return GetRuleContext<CaracteresContext>(0);
		}
		public CadenaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cadena; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterCadena(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitCadena(this);
		}
	}

	[RuleVersion(0)]
	public CadenaContext cadena() {
		CadenaContext _localctx = new CadenaContext(Context, State);
		EnterRule(_localctx, 14, RULE_cadena);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(QUOTE);
			State = 66;
			caracteres(0);
			State = 67;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaracteresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaracterContext caracter() {
			return GetRuleContext<CaracterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaracteresContext caracteres() {
			return GetRuleContext<CaracteresContext>(0);
		}
		public CaracteresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caracteres; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterCaracteres(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitCaracteres(this);
		}
	}

	[RuleVersion(0)]
	public CaracteresContext caracteres() {
		return caracteres(0);
	}

	private CaracteresContext caracteres(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CaracteresContext _localctx = new CaracteresContext(Context, _parentState);
		CaracteresContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_caracteres, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 70;
			caracter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CaracteresContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_caracteres);
					State = 72;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 73;
					caracter();
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaracterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETRA() { return GetToken(CSubsetParser.LETRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITO() { return GetToken(CSubsetParser.DIGITO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimboloContext simbolo() {
			return GetRuleContext<SimboloContext>(0);
		}
		public CaracterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caracter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterCaracter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitCaracter(this);
		}
	}

	[RuleVersion(0)]
	public CaracterContext caracter() {
		CaracterContext _localctx = new CaracterContext(Context, State);
		EnterRule(_localctx, 18, RULE_caracter);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETRA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				Match(LETRA);
				}
				break;
			case DIGITO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				Match(DIGITO);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case SEMI:
			case QUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81;
				simbolo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimboloContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CSubsetParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(CSubsetParser.QUOTE, 0); }
		public SimboloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simbolo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterSimbolo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitSimbolo(this);
		}
	}

	[RuleVersion(0)]
	public SimboloContext simbolo() {
		SimboloContext _localctx = new SimboloContext(Context, State);
		EnterRule(_localctx, 20, RULE_simbolo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 393342L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return instrucciones_sempred((InstruccionesContext)_localctx, predIndex);
		case 8: return caracteres_sempred((CaracteresContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instrucciones_sempred(InstruccionesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool caracteres_sempred(CaracteresContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,21,87,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,5,0,28,8,0,10,0,12,0,
		31,9,0,1,1,1,1,3,1,35,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,49,8,2,1,3,1,3,3,3,53,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,5,8,75,8,8,10,8,12,8,78,9,
		8,1,9,1,9,1,9,3,9,83,8,9,1,10,1,10,1,10,0,2,0,16,11,0,2,4,6,8,10,12,14,
		16,18,20,0,2,1,0,19,20,2,0,1,6,17,18,82,0,22,1,0,0,0,2,34,1,0,0,0,4,36,
		1,0,0,0,6,52,1,0,0,0,8,54,1,0,0,0,10,60,1,0,0,0,12,63,1,0,0,0,14,65,1,
		0,0,0,16,69,1,0,0,0,18,82,1,0,0,0,20,84,1,0,0,0,22,23,6,0,-1,0,23,24,3,
		2,1,0,24,29,1,0,0,0,25,26,10,1,0,0,26,28,3,2,1,0,27,25,1,0,0,0,28,31,1,
		0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,1,1,0,0,0,31,29,1,0,0,0,32,35,3,4,
		2,0,33,35,3,6,3,0,34,32,1,0,0,0,34,33,1,0,0,0,35,3,1,0,0,0,36,37,5,9,0,
		0,37,38,5,13,0,0,38,39,3,12,6,0,39,40,5,14,0,0,40,41,5,15,0,0,41,42,3,
		6,3,0,42,48,5,16,0,0,43,44,5,10,0,0,44,45,5,15,0,0,45,46,3,6,3,0,46,47,
		5,16,0,0,47,49,1,0,0,0,48,43,1,0,0,0,48,49,1,0,0,0,49,5,1,0,0,0,50,53,
		3,8,4,0,51,53,3,10,5,0,52,50,1,0,0,0,52,51,1,0,0,0,53,7,1,0,0,0,54,55,
		5,11,0,0,55,56,5,13,0,0,56,57,3,14,7,0,57,58,5,14,0,0,58,59,5,17,0,0,59,
		9,1,0,0,0,60,61,5,12,0,0,61,62,5,17,0,0,62,11,1,0,0,0,63,64,7,0,0,0,64,
		13,1,0,0,0,65,66,5,18,0,0,66,67,3,16,8,0,67,68,5,18,0,0,68,15,1,0,0,0,
		69,70,6,8,-1,0,70,71,3,18,9,0,71,76,1,0,0,0,72,73,10,1,0,0,73,75,3,18,
		9,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,17,1,0,
		0,0,78,76,1,0,0,0,79,83,5,7,0,0,80,83,5,8,0,0,81,83,3,20,10,0,82,79,1,
		0,0,0,82,80,1,0,0,0,82,81,1,0,0,0,83,19,1,0,0,0,84,85,7,1,0,0,85,21,1,
		0,0,0,6,29,34,48,52,76,82
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
